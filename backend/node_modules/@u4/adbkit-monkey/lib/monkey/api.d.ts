/// <reference types="node" />
import { Callback } from './Callback';
import { EventEmitter } from 'events';
declare type KeyCode = string | number;
export default class Api extends EventEmitter {
    send(...args: unknown[]): void;
    keyDown(keyCode: KeyCode, callback: Callback<string>): this;
    keyUp(keyCode: KeyCode, callback: Callback<string>): this;
    touchDown(x: number, y: number, callback: Callback<string>): this;
    touchUp(x: number, y: number, callback: Callback<string>): this;
    touchMove(x: number, y: number, callback: Callback<string>): this;
    trackball(dx: number, dy: number, callback: Callback<string>): this;
    flipOpen(callback: Callback<string>): this;
    flipClose(callback: Callback<string>): this;
    wake(callback: Callback<string>): this;
    tap(x: number, y: number, callback: Callback<string>): this;
    press(keyCode: KeyCode, callback: Callback<string>): this;
    type(str: string, callback: Callback<string>): this;
    list(callback: Callback<string>): this;
    get(name: any, callback: Callback<string>): this;
    quit(callback: Callback<string>): this;
    done(callback: Callback<string>): this;
    sleep(ms: any, callback: Callback<string>): this;
    getAmCurrentAction(callback: Callback<string>): this;
    getAmCurrentCategories(callback: Callback<string>): this;
    getAmCurrentCompClass(callback: Callback<string>): this;
    getAmCurrentCompPackage(callback: Callback<string>): this;
    getAmCurrentData(callback: Callback<string>): this;
    getAmCurrentPackage(callback: Callback<string>): this;
    getBuildBoard(callback: Callback<string>): this;
    getBuildBrand(callback: Callback<string>): this;
    getBuildCpuAbi(callback: Callback<string>): this;
    getBuildDevice(callback: Callback<string>): this;
    getBuildDisplay(callback: Callback<string>): this;
    getBuildFingerprint(callback: Callback<string>): this;
    getBuildHost(callback: Callback<string>): this;
    getBuildId(callback: Callback<string>): this;
    getBuildManufacturer(callback: Callback<string>): this;
    getBuildModel(callback: Callback<string>): this;
    getBuildProduct(callback: Callback<string>): this;
    getBuildTags(callback: Callback<string>): this;
    getBuildType(callback: Callback<string>): this;
    getBuildUser(callback: Callback<string>): this;
    getBuildVersionCodename(callback: Callback<string>): this;
    getBuildVersionIncremental(callback: Callback<string>): this;
    getBuildVersionRelease(callback: Callback<string>): this;
    getBuildVersionSdk(callback: Callback<string>): this;
    getClockMillis(callback: Callback<string>): this;
    getClockRealtime(callback: Callback<string>): this;
    getClockUptime(callback: Callback<string>): this;
    getDisplayDensity(callback: Callback<string>): this;
    getDisplayHeight(callback: Callback<string>): this;
    getDisplayWidth(callback: Callback<string>): this;
}
export {};
//# sourceMappingURL=api.d.ts.map