/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import BinaryParser from './parser/binary';
import { AndroidLogLevelId } from './priority';
import { Duplex } from 'stream';
import Entry from './entry';
export interface ReaderOptions {
    captureRejections?: boolean;
    format: 'binary';
    fixLineFeeds: boolean;
    priority: AndroidLogLevelId;
}
export default class Reader extends EventEmitter {
    static ANY: string;
    parser: BinaryParser;
    stream: Duplex | null;
    options: ReaderOptions;
    private filters;
    constructor(options?: Partial<ReaderOptions>);
    exclude(tag: string): this;
    excludeAll(): this;
    include(tag: string, priority?: number): this;
    includeAll(priority?: number | string): this;
    resetFilters(): this;
    _hook(): void;
    _filter(entry: Entry): boolean;
    _priority(priority: number | string): number;
    connect(stream: Duplex): this;
    end(): this;
}
//# sourceMappingURL=reader.d.ts.map