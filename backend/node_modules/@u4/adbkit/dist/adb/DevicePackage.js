var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DevicePackage_name;
class DevicePackage {
    constructor(client, name) {
        this.client = client;
        _DevicePackage_name.set(this, void 0);
        __classPrivateFieldSet(this, _DevicePackage_name, name, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _DevicePackage_name, "f");
    }
    async dump() {
        return this.client.execOut(`dumpsys package ${__classPrivateFieldGet(this, _DevicePackage_name, "f")}`, 'utf-8');
    }
    async getInfo() {
        let raw = await this.dump();
        const indexStart = raw.indexOf('\nPackages:');
        if (indexStart === -1)
            throw Error('invalid dumpsys package input');
        raw = raw.substring(indexStart + 1);
        const end = raw.search(/\n\w/m);
        if (end >= 0)
            raw = raw.substring(0, end);
        const result = {};
        for (const m of raw.matchAll(/(\w+)=(.+)/g)) {
            result[m[1]] = m[2];
        }
        return result;
    }
}
_DevicePackage_name = new WeakMap();
export default DevicePackage;
//# sourceMappingURL=DevicePackage.js.map