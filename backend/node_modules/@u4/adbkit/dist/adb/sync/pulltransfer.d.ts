import { Buffer } from 'node:buffer';
import { Stream } from 'node:stream';
import { BufferEncoding } from '../utils.js';
/**
 * `PullTransfer` is a [`Stream`][node-stream]. Use [`fs.createWriteStream()`][node-fs] to pipe the stream to a file if necessary.
 */
export default class PullTransfer extends Stream.PassThrough {
    stats: {
        bytesTransferred: number;
    };
    /**
     * Cancels the transfer by ending the connection. Can be useful for reading endless streams of data, such as `/dev/urandom` or `/dev/zero`, perhaps for benchmarking use. Note that you must create a new sync connection if you wish to continue using the sync service.
     * @returns The pullTransfer instance.
     */
    cancel(): boolean;
    write(chunk: Buffer, encoding?: BufferEncoding | typeof callback, callback?: (error: Error | null | undefined) => void): boolean;
    promiseWrite(chunk: Buffer, encoding?: BufferEncoding): Promise<void>;
    private waitForEndPromise?;
    /**
     * get end notification using Promise
     */
    waitForEnd(): Promise<void>;
}
//# sourceMappingURL=pulltransfer.d.ts.map