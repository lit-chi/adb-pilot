import Command from '../../command.js';
import Connection from '../../connection.js';
export default class IpRouteCommand extends Command<Array<IpRouteEntry>> {
    constructor(connection: Connection, options?: {
        sudo?: boolean;
    });
    execute(...args: string[]): Promise<Array<IpRouteEntry>>;
    private parseIpRoute;
}
declare const ValidTypes: readonly ["anycast", "unicast", "local", "broadcast", "multicast", "throw", "unreachable", "prohibit", "blackhole", "nat"];
type ValidTypesT = typeof ValidTypes[number];
type CIDR = string;
/**
 * unix route model
 * ROUTE := NODE_SPEC [ INFO_SPEC ]
 *
 * NODE_SPEC := [ TYPE ] PREFIX [ tos TOS ] [ table TABLE_ID ] [ proto RTPROTO ] [ scope SCOPE ] [ metric METRIC ]
 */
export declare class IpRouteEntry {
    type?: ValidTypesT;
    dest?: CIDR;
    via?: string;
    dev?: string;
    mtu?: string;
    table?: string | number;
    expires?: string;
    proto?: 'kernel' | 'boot' | 'static' | number;
    scope?: 'host' | 'link' | 'global' | number;
    tos?: string;
    src?: string;
    pref?: 'medium' | number;
    metric?: number;
    /**
     * hoplimit [0-255]
     */
    hoplimit?: number;
    constructor(line: string);
    toString(): string;
    clone(): IpRouteEntry;
}
export {};
//# sourceMappingURL=ipRoute.d.ts.map