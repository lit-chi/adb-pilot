export declare const MessageTypeMap: {
    readonly DO_IDENTIFY: 1;
    readonly DO_KEYEVENT: 2;
    readonly DO_TYPE: 3;
    readonly DO_WAKE: 4;
    readonly DO_ADD_ACCOUNT_MENU: 24;
    readonly DO_REMOVE_ACCOUNT: 20;
    readonly GET_ACCOUNTS: 26;
    readonly GET_BROWSERS: 5;
    readonly GET_CLIPBOARD: 6;
    readonly GET_DISPLAY: 19;
    readonly GET_PROPERTIES: 7;
    readonly GET_RINGER_MODE: 27;
    readonly GET_SD_STATUS: 25;
    readonly GET_VERSION: 8;
    readonly GET_WIFI_STATUS: 23;
    readonly GET_BLUETOOTH_STATUS: 29;
    readonly GET_ROOT_STATUS: 31;
    readonly SET_CLIPBOARD: 9;
    readonly SET_KEYGUARD_STATE: 10;
    readonly SET_RINGER_MODE: 21;
    readonly SET_ROTATION: 12;
    readonly SET_WAKE_LOCK: 11;
    readonly SET_WIFI_ENABLED: 22;
    readonly SET_BLUETOOTH_ENABLED: 30;
    readonly SET_MASTER_MUTE: 28;
    readonly EVENT_AIRPLANE_MODE: 13;
    readonly EVENT_BATTERY: 14;
    readonly EVENT_CONNECTIVITY: 15;
    readonly EVENT_PHONE_STATE: 16;
    readonly EVENT_ROTATION: 17;
    readonly EVENT_BROWSER_PACKAGE: 18;
};
export type MessageType = typeof MessageTypeMap[keyof typeof MessageTypeMap];
export interface Envelope {
    id?: number;
    type: MessageType;
    message: Uint8Array;
}
export interface AirplaneModeEvent {
    enabled: boolean;
}
export interface BatteryEvent {
    status: string;
    health: string;
    source: string;
    level: number;
    scale: number;
    temp: number;
    voltage: number;
}
export interface BrowserApp {
    name: string;
    component: string;
    selected: boolean;
    system: boolean;
}
export interface BrowserPackageEvent {
    selected: boolean;
    apps: BrowserApp[];
}
export interface ConnectivityEvent {
    connected: boolean;
    type?: string;
    subtype?: string;
    failover?: boolean;
    roaming?: boolean;
}
export interface PhoneStateEvent {
    state: string;
    manual: boolean;
    operator?: string;
}
export interface RotationEvent {
    rotation: number;
}
export interface GetVersionRequest {
}
export interface GetVersionResponse {
    success: boolean;
    version?: string;
}
export interface SetKeyguardStateRequest {
    enabled: boolean;
}
export interface SetKeyguardStateResponse {
    success: boolean;
}
export interface SetWakeLockRequest {
    enabled: boolean;
}
export interface SetWakeLockResponse {
    success: boolean;
}
export declare const ClipboardTypeMap: {
    readonly TEXT: 1;
};
export type ClipboardType = typeof ClipboardTypeMap[keyof typeof ClipboardTypeMap];
export interface SetClipboardRequest {
    type: ClipboardType;
    text?: string;
}
export interface SetClipboardResponse {
    success: boolean;
}
export interface GetClipboardRequest {
    type: ClipboardType;
}
export interface GetClipboardResponse {
    success: boolean;
    type?: ClipboardType;
    text?: string;
}
export interface GetBrowsersRequest {
}
export interface GetBrowsersResponse {
    success: boolean;
    selected: boolean;
    apps: BrowserApp[];
}
export interface GetDisplayRequest {
    id: number;
}
export interface GetDisplayResponse {
    success: boolean;
    width?: number;
    height?: number;
    xdpi?: number;
    ydpi?: number;
    fps?: number;
    density?: number;
    rotation?: number;
    secure?: boolean;
}
export interface Property {
    name: string;
    value: string;
}
export interface GetPropertiesRequest {
    properties: string[];
}
export interface GetPropertiesResponse {
    success: boolean;
    properties: Property[];
}
export interface DoIdentifyRequest {
    serial: string;
}
export interface DoIdentifyResponse {
    success: boolean;
}
export interface GetAccountsRequest {
    type?: string;
}
export interface GetAccountsResponse {
    success: boolean;
    accounts: string[];
}
export interface DoAddAccountMenuRequest {
}
export interface DoAddAccountMenuResponse {
    success: boolean;
}
export interface DoRemoveAccountRequest {
    type: string;
    account?: string;
}
export interface DoRemoveAccountResponse {
    success: boolean;
}
export declare const RingerModeMap: {
    readonly SILENT: 0;
    readonly VIBRATE: 1;
    readonly NORMAL: 2;
};
export type RingerMode = typeof RingerModeMap[keyof typeof RingerModeMap];
export interface SetRingerModeRequest {
    mode: RingerMode;
}
export interface SetRingerModeResponse {
    success: boolean;
}
export interface GetRingerModeRequest {
}
export interface GetRingerModeResponse {
    success: boolean;
    mode: RingerMode;
}
export interface SetWifiEnabledRequest {
    enabled: boolean;
}
export interface SetWifiEnabledResponse {
    success: boolean;
}
export interface GetWifiStatusRequest {
}
export interface GetWifiStatusResponse {
    success: boolean;
    status: boolean;
}
export interface GetRootStatusRequest {
}
export interface GetRootStatusResponse {
    success: boolean;
    status: boolean;
}
export interface SetBluetoothEnabledRequest {
    enabled: boolean;
}
export interface SetBluetoothEnabledResponse {
    success: boolean;
}
export interface GetBluetoothStatusRequest {
}
export interface GetBluetoothStatusResponse {
    success: boolean;
    status: boolean;
}
export interface GetSdStatusRequest {
}
export interface GetSdStatusResponse {
    success: boolean;
    mounted: boolean;
}
export interface SetMasterMuteRequest {
    enabled: boolean;
}
export interface SetMasterMuteResponse {
    success: boolean;
}
export declare const KeyEventMap: {
    readonly DOWN: 0;
    readonly UP: 1;
    readonly PRESS: 2;
};
export type KeyEvent = typeof KeyEventMap[keyof typeof KeyEventMap];
export interface KeyEventRequest {
    event: KeyEvent;
    keyCode: number;
    shiftKey?: boolean;
    ctrlKey?: boolean;
    altKey?: boolean;
    metaKey?: boolean;
    symKey?: boolean;
    functionKey?: boolean;
    capsLockKey?: boolean;
    scrollLockKey?: boolean;
    numLockKey?: boolean;
}
export interface DoTypeRequest {
    text: string;
}
export interface SetRotationRequest {
    rotation: number;
    lock: boolean;
}
export interface DoWakeRequest {
}
//# sourceMappingURL=STFServiceModel.d.ts.map